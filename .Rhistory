mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
ditinct()
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
distinct()
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(fornow)){
next
}
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
for (i in 1:nrow(mcmf2)){
cxy_out <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(cxy_out)){
next
}
cxy_out <- cxy_out %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, cxy_out)
}
View(df)
df2 <- df %>%
distinct()
df2 <- df %>%
select(address, starts_with("coordinate"))
View(df2)
df2 <- df %>%
select(address, starts_with("coordinate")) %>%
distinct()
View(df2)
df2 <- df %>%
select(address, coordinates.x, coordinates.y) %>%
distinct()
View(df2)
df3 <- df %>%
select(address) %>%
distinct()
View(df3)
View(mcmf2)
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
distinct()
mcmf_impute <- mcmf %>%
filter(is.na(latitude))
mcmf_impute <- mcmf %>%
filter(is.na(latitude)) %>%
left_join(df2, by = "address")
View(mcmf_impute)
mcmf_impute <- mcmf %>%
filter(is.na(latitude)) %>%
left_join(df2)
View(mcmf_impute)
mcmf_impute %>% skimr::skim_without_charts()
mcmf_impute <- mcmf %>%
filter(meeting_type == "face_to_face") %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
left_join(df2)
View(mcmf_impute)
mcmf_hasxy <- mcmf %>%
filter(!is.na(latitude))
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute)
View(mcmf_impute)
View(mcmf_map)
mcmf_map2 <- mcmf_map %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y))
mcmf_map2 <- mcmf_map %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y))
View(mcmf_map2)
mcmf_map2 <- mcmf_map %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude))
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute) %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude))
View(mcmf_map)
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute) %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude)) %>%
select(-c(starts_with("coordinates")))
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
illinois <- tidycensus::get_acs(state = "IL", geography = "tract",
variables = "B19013_001", geometry = TRUE)
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
## cleaning spatial data
## libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(tigris)
library(censusxy)
## load data
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names()
## create a df to be populated
## by address and cxy_single results
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
## maybe could be more thorough than this above and try parsing through
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
distinct()
for (i in 1:nrow(mcmf2)){
cxy_out <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(cxy_out)){
next
}
cxy_out <- cxy_out %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, cxy_out)
}
## can put this into the function
df2 <- df %>%
select(address,
coordinates.x,
coordinates.y)
mcmf_impute <- mcmf %>%
filter(meeting_type == "face_to_face") %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
left_join(df2)
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute) %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude)) %>%
select(-c(starts_with("coordinates")))
## spatial join points with tracts
map <- read_csv("data/mcmf_map.csv") %>%
janitor::clean_names()
illinois <- tidycensus::get_acs(state = "IL", geography = "tract",
variables = "B19013_001", geometry = TRUE)
il_tracts <- tracts("IL", class = "sf") %>%
select(GEOID, TRACTCE)
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
test <- st_as_sf(map, wkt = "the_geoid")
View(map)
test <- st_as_sf(map, wkt = "the_geom")
View(test)
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
test2 <- st_join(mcmf_map2, map)
test %>% skimr::skim_without_charts()
test <- map %>%
st_as_sf(wkt = "the_geom",
# within illinois coordinate reference system
crs = st_crs(illinois))
test2 <- st_join(mcmf_map2, test)
View(test2)
mcmf_sp <- st_join(mcmf_map2, map)
map <- read_csv("data/mcmf_map.csv") %>%
janitor::clean_names() %>%
# convert multipolygons
st_as_sf(wkt = "the_geom",
# within illinois coordinate reference system
crs = st_crs(illinois))
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
mcmf_sp <- st_join(mcmf_map2, map)
View(mcmf_sp)
mcmf_sp %>% ggplot() +
geom_sf()
mcmf_sp %>% ggplot() +
geom_sf(data = "the_geom")
View(mcmf_sp)
?st_join
map %>% ggplot() +
geom_sf()
ggplot() +
geom_sf(data = map)
ggplot() +
geom_sf(data = map) +
geom_sf(mcmf_map2)
ggplot() +
geom_sf(data = map) +
geom_sf(data = mcmf_map2, aes(x = "latitude", y = "longitude"))
ggplot() +
geom_sf(data = map) +
geom_point(data = mcmf_map2, aes(x = "latitude", y = "longitude"))
ggplot() +
geom_sf(data = map) +
geom_sf(data = mcmf_map2)
View(mcmf_map2)
ggplot() +
geom_sf(data = map)
ggplot() +
geom_sf(data = map) +
geom_sf(data = mcmf_map2)
ggplot() +
geom_sf(data = map)
View(mcmf_sp)
ggplot() +
geom_sf(data = mcmf_sp)
mcmf %>%
filter(!is.na(latitude)) %>%
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois)) %>%
ggplot() +
geom_sf()
mcmf %>%
filter(!is.na(latitude)) %>%
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois)) %>%
ggplot() +
geom_sf() +
geom_sf(data = map)
mcmf %>%
filter(!is.na(latitude)) %>%
filter(latitude > 41) %>%
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois)) %>%
filter(latitude )
mcmf %>%
filter(!is.na(latitude)) %>%
filter(latitude > 41) %>%
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois)) %>%
ggplot() +
geom_sf() +
geom_sf(data = map)
mcmf_sp <- st_join(map, mcmf_map2)
View(mcmf_sp)
ggplot() +
geom_sf(data = mcmf_map)
ggplot() +
geom_sf(data = mcmf_sp)
mcmf %>%
filter(!is.na(latitude)) %>%
filter(latitude > 41) %>%
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois)) %>%
ggplot() +
geom_sf() +
geom_sf(data = map)
mcmf_map %>%
filter(!is.na(latitude)) %>%
filter(latitude > 41) %>%
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois)) %>%
ggplot() +
geom_sf() +
geom_sf(data = map)
View(map)
mcmf_online <- mcmf %>%
filter(meeting_type == "online")
View(mcmf_online)
View(mcmf_online)
4:7
lst <- 4:7
lst <- unlist(4:7)
lst <- toString(4:7)
View(mcmf)
save(mcmf_map2, mcmf_sp, file = "map_cleaning.rda")
## cleaning spatial data
## libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(tigris)
library(censusxy)
## load data
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names()
## create a df to be populated
## by address and cxy_single results
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
## maybe could be more thorough than this above and try parsing through
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
distinct()
for (i in 1:nrow(mcmf2)){
cxy_out <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(cxy_out)){
next
}
cxy_out <- cxy_out %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, cxy_out)
}
## can put this into the function
df2 <- df %>%
select(address,
coordinates.x,
coordinates.y)
mcmf_online <- mcmf %>%
filter(meeting_type == "online")
mcmf_impute <- mcmf %>%
filter(meeting_type == "face_to_face") %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
left_join(df2)
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute) %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude)) %>%
select(-c(starts_with("coordinates")))
illinois <- tidycensus::get_acs(state = "IL", geography = "tract",
variables = "B19013_001", geometry = TRUE)
map <- read_csv("data/mcmf_map.csv") %>%
janitor::clean_names() %>%
# convert multipolygons
st_as_sf(wkt = "the_geom",
# within illinois coordinate reference system
crs = st_crs(illinois))
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
ggplot() +
geom_sf(data = map)
mcmf_sp <- st_join(map, mcmf_map2)
View(mcmf_sp)
?geom_sf
mcmf_sp <- st_join(map, mcmf_map2) %>%
## select() %>%
group_by(community, category) %>%
summarise(count)
mcmf_sp <- st_join(map, mcmf_map2) %>%
## select() %>%
group_by(community, category_name) %>%
summarise(count)
?summarise
mcmf_sp <- st_join(map, mcmf_map2) %>%
## select() %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
mcmf_cat <- mcmf_sp %>%
## select() %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
View(map)
community_geoms <- map %>%
select(the_geom, community) %>%
distinct()
mcmf_cat <- mcmf_sp %>%
select(community, category_name) %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
View(map)
mcmf_cat <- mcmf %>%
group_by(geographic_cluster_name, category_name) %>%
dplyr::summarise(n = n())
View(mcmf_cat)
mcmf_cat <- mcmf_map2 %>%
group_by(geographic_cluster_name, category_name) %>%
dplyr::summarise(n = n())
mcmf_cat <- mcmf_sp %>%
group_by(geographic_cluster_name, category_name) %>%
dplyr::summarise(n = n())
View(mcmf_cat)
mcmf_cat <- mcmf_sp %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
mcmf_cat <- mcmf_sp %>%
select(community, category_name) %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
View(mcmf_cat)
ggplot() +
geom_sf(data = mcmf_cat)
ggplot() +
geom_sf(data = mcmf_cat, aes(fill = n))
mcmf_cat <- mcmf_sp %>%
##select(community, category_name) %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
ggplot() +
geom_sf(data = mcmf_cat, aes(fill = n)) +
facet_wrap(category)
ggplot() +
geom_sf(data = mcmf_cat, aes(fill = n)) +
facet_wrap(category_name)
ggplot() +
geom_sf(data = mcmf_cat, aes(fill = n)) +
facet_wrap("category_name")
ggplot() +
geom_sf(data = mcmf_cat) +
geom_sf(data = mcmf_cat, aes(fill = n)) +
facet_wrap("category_name")
save(mcmf_map2, mcmf_sp, map, file = "map_cleaning.rda")
## load packages
library(ggplot2)
library(tidyverse)
library(sf)
library(leaflet)
library(raster)
## load data
load("map_cleaning.rda")
View(mcmf_sp)
## community & category counts
eda_counts <- mcmf_sp %>%
##select(community, category_name) %>%
group_by(community, category_name) %>%
dplyr::summarise(n = n())
ggplot() +
geom_sf(data = eda_counts, aes(fill = n)) +
facet_wrap("category_name")
mcmf_sp %>% count(program_pays_participants)
## save for eda
save(eda_counts, file = "eda_maps.rda")
## wordclouds
## load packages
library(tidyverse)
library(ggplot2)
library(wordcloud)
## load data
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names()
