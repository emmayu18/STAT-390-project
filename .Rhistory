age <- data.frame(matrix(NA,
nrow = 73982,
ncol = 1)) %>%
rename(age_list = matrix.NA..nrow...73982..ncol...1.)
age <- for (ii in dat) {
age["age_list"][ii] = dat["min_age"][ii] - dat["max_age"][ii]
}
age["age_list"]
age["age_list"][1]
age["age_list"][1][2]
age["age_list"][1]
age["age_list"][1][ii] = dat["min_age"][1][ii] - dat["max_age"][1][ii]
dat[1,]
dat[1,][2]
dat[1,][20]
dat[1,][6]
age_row[0] <- row[7] - row[6]
age_row[0=row[7] - row[6]
age_row[0] = row[7] - row[6]
dat[1,][7]
age_row[0] = dat[i,][7] - dat[i,][6]
age_row <- age[ii,]
}
}
for (ii in 1:nrow(dat)) {
age_row <- age[ii,]
age_row[0] = dat[ii,][7] - dat[ii,][6]
}
View(age)
age <- data.frame(matrix(NA,
nrow = 3,
ncol = 1)) %>%
rename(age_list = matrix.NA..nrow...3..ncol...1.)
dat <- data.frame("min_age" = c(1,2,3), "max_age" = c(8,9, 11))
View(dat)
for (ii in 1:nrow(dat)) {
age_row <- age[ii,]
age_row[0] = dat[ii,][2] - dat[ii,][1]
}
View(age)
age_row[0] <- dat[ii,][2] - dat[ii,][1]
View(age_row)
for (ii in 1:nrow(dat)) {
age[ii,][0] <- dat[ii,][2] - dat[ii,][1]
}
age[i, "age_list"] <- dat[ii,][2] - dat[ii,][1]
age[ii, "age_list"] <- dat[ii,][2] - dat[ii,][1]
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
list_priority_areas = c("Austin", "North Lawndale", "Humboldt Park",
"East Garfield Park", "Englewood", "Auburn Gresham",
"West Garfield Park", "Roseland", "Greater Grand Crossing",
"West Englewood", "South Shore", "New City", "Chicago Lawn",
"South Lawndale", "West Pullman"
)
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# age range
dat <- dat %>%
mutate(age_range = max_age - min_age)
age <- data.frame(matrix(NA,
nrow = 3,
ncol = 1)) %>%
rename(age_list = matrix.NA..nrow...3..ncol...1.)
ex <- data.frame("min_age" = c(1,2,3), "max_age" = c(8,9, 11))
age[ii, "age_list"] <- toString(ex[ii,][1]:ex[ii,][2])
for (ii in 1:nrow(dat)) {
age[ii, "age_list"] <- toString(ex[ii,][1]:ex[ii,][2])
}
for (ii in 1:nrow(dat)) {
age[ii, "age_list"] <- toString(ex[ii,][1]:ex[ii,][2])
}
# age range list
age_dat <- dat %>%
mutate(age_list = toString(min_age:max_age)) %>%
select(age_list)
View(age_dat)
# age range list
age_dat <- dat %>%
mutate(age_list = toString(min_age:max_age)) %>%
select(min_age, max_age, age_list)
# age range list
age_dat <- dat %>%
mutate(age_list = min_age:max_age) %>%
select(min_age, max_age, age_list)
age <- data.frame(matrix(NA,
nrow = 3,
ncol = 1)) %>%
rename(age_list = matrix.NA..nrow...3..ncol...1.)
ex <- data.frame("min_age" = c(1,2,3), "max_age" = c(8,9, 11))
View(ex)
for (ii in 1:nrow(dat)) {
age[ii, "age_list"] <- toString(ex[ii,][1]:ex[ii,][2])
}
age[ii, "age_list"] <- toString(ex[ii,][0]:ex[ii,][1])
select(min_age, max_age) %>%
mutate(age_list = map_chr(1:nrow(dat),
~toString(min_age:max_age)))
select(min_age, max_age) %>%
mutate(age_list = map_chr(1:nrow(dat),
~toString(dat[.x]min_age:dat[.x]max_age)))
select(min_age, max_age) %>%
mutate(age_list = map_chr(1:nrow(dat),
~toString(dat[x.]min_age:dat[x.]max_age)))
?append
list0 <- c()
for (i in nrow(dat)){
range <- min_age:max_age
string <- toString(range)
append(list0, string)
}
for (i in nrow(dat)){
range <- dat$min_age:dat$max_age
string <- toString(range)
append(list0, string)
}
for (i in nrow(dat)){
range <- dat$min_age - dat$max_age
# string <- toString(range)
append(list0, range)
}
for (i in nrow(dat)){
range <- dat$min_age - dat$max_age
# string <- toString(range)
append(list0, range)
}
list0 <- c()
for (i in nrow(dat)){
range <- dat$min_age - dat$max_age
# string <- toString(range)
list0 <- append(list0, range)
}
for (i in nrow(dat)){
range <- seq.int(dat$min_age, dat$max_age)
# string <- toString(range)
list0 <- append(list0, range)
}
for (i in nrow(dat)){
range <- seq.int(dat$min_age[i], dat$max_age[i])
# string <- toString(range)
list0 <- append(list0, range)
}
for (i in nrow(dat)){
range <- seq.int(dat$min_age[i], dat$max_age[i])
string <- toString(range)
list0 <- append(list0, string)
}
age_dat <- dat %>%
select(min_age, max_age) %>%
mutate(age_list = toString(seq.int(min_age, max_age)))
age_dat <- dat %>%
select(min_age, max_age) %>%
rowwise() %>%
mutate(age_list = toString(seq.int(min_age, max_age)))
View(age_dat)
View(age_dat)
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
list_priority_areas = c("Austin", "North Lawndale", "Humboldt Park",
"East Garfield Park", "Englewood", "Auburn Gresham",
"West Garfield Park", "Roseland", "Greater Grand Crossing",
"West Englewood", "South Shore", "New City", "Chicago Lawn",
"South Lawndale", "West Pullman"
)
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
list0 <- c()
for (i in nrow(dat)){
range <- seq.int(dat$min_age[i], dat$max_age[i])
string <- toString(range)
list0 <- append(list0, string)
}
age_dat %>%
mutate(age_list = age_list)
age_dat <- dat %>%
select(min_age, max_age) %>%
rowwise() %>%
mutate(age_list = toString(seq.int(min_age, max_age)))
age_dat %>%
mutate(age_list = age_list)
View(age_dat)
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
list_priority_areas = c("Austin", "North Lawndale", "Humboldt Park",
"East Garfield Park", "Englewood", "Auburn Gresham",
"West Garfield Park", "Roseland", "Greater Grand Crossing",
"West Englewood", "South Shore", "New City", "Chicago Lawn",
"South Lawndale", "West Pullman"
)
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# age range list
age_dat <- dat %>%
select(min_age, max_age) %>%
rowwise() %>%
mutate(age_list = toString(seq.int(min_age, max_age)))
list0 <- c()
for (i in nrow(dat)){
range <- seq.int(dat$min_age[i], dat$max_age[i])
string <- toString(range)
list0 <- append(list0, string)
}
age_dat %>%
mutate(age_list = age_list)
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
list_priority_areas = c("Austin", "North Lawndale", "Humboldt Park",
"East Garfield Park", "Englewood", "Auburn Gresham",
"West Garfield Park", "Roseland", "Greater Grand Crossing",
"West Englewood", "South Shore", "New City", "Chicago Lawn",
"South Lawndale", "West Pullman"
)
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# number of days between start of registration and end of registration
dat %>%
mutate(registration_open = as.Date(registration_open,
format = "%m/%d/%y"),
registration_deadline = as.Date(registration_open,
format = "%m/%d/%y")) %>%
mutate(days_to_register = as.numeric(registration_deadline - registration_open))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# age range list
age_dat <- dat %>%
select(min_age, max_age) %>%
rowwise() %>%
mutate(age_list = toString(seq.int(min_age, max_age)))
list0 <- c()
for (i in nrow(dat)){
range <- seq.int(dat$min_age[i], dat$max_age[i])
string <- toString(range)
list0 <- append(list0, string)
}
View(age_dat)
## Visualization
# dist. of regions with priority highlighted
ggplot(dat %>% filter(!is.na(geographic_cluster_name)),
mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
labs(title = "Distribution of Regions",
x = "Region Name",
y = "Count",
fill = "Priority Region") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5,
angle = 90,
hjust = 0.95)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
# dist. of categories
ggplot(dat2 %>% filter(!is.na(category_name)),
mapping = aes(fct_infreq(category_name))) +
geom_bar() +
labs(title = "Distribution of Categories",
x = "Category",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 0.95))
list0
# dist. of age
list_age = c()
# iterate through age_list and
for (i in nrow(age_dat)){
list_age <- append(list_age, dat$age_list[i])
}
View(age_dat)
list_age <- append(list_age, age_dat$age_list[i])
list_age
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# age range list
age_dat <- dat %>%
select(min_age, max_age) %>%
rowwise() %>%
mutate(age_list = strsplit(toString(seq.int(min_age, max_age)), ", "))
list_age = c()
View(age_dat)
for (i in age_dat$age_list) {
for (j in i){
list_age <- append(list_age, as.numeric(j))
}
}
list_age
save(list_age, file = "list_age.rda")
age_data <- data.frame(list_age)
View(age_data)
ggplot(age_data, aes(list_age)) +
geom_histogram() # or geom_bar()
geom_histogram(bins = 90# or geom_bar()
)
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 90) # or geom_bar()
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 90) + # or geom_bar()
xlim(0,100)
length(seq.int(7:100))
60*78000
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 90) + # or geom_bar()
xlim(0,30)
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 30) + # or geom_bar()
xlim(0,30)
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 25) + # or geom_bar()
xlim(0,25)
ggplot(age_data, aes(list_age)) +
geom_bar() +
xlim(0,100)
ggplot(age_data, aes(list_age)) +
geom_bar() +
xlim(0,25)
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 25) +
xlim(0,25)
list_age = c()
for (i in age_dat$age_list) {
for (j in i){
list_age <- append(list_age, as.numeric(j))
}
}
list_age = c()
for (i in age_dat$age_list) {
for (j in i){
list_age <- append(list_age, as.numeric(j))
}
}
save(list_age, file = "list_age.rda")
age_data <- data.frame(list_age)
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 25, color = "white") +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_bar() +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 25, color = "white") +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 20, color = "white") +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 20, color = "white") +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_bar() +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 20, color = "white") +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
ggplot(age_data, aes(list_age)) +
geom_bar() +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
load("list_age.rda")
age_data <- data.frame(list_age)
ggplot(age_data, aes(list_age)) +
geom_histogram(bins = 20, color = "white") +
xlim(0,20) +
labs(x = "Age",
y = "Count") +
theme_minimal()
