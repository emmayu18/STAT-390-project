gencat_count <- as.data.frame(eda_counts) %>%
filter(min_grade <= 1 | max_grade >= 13) %>%
group_by(community, general_category) %>%
summarize(n = n(),
free_food = sum(program_provides_free_food)) %>%
inner_join(as.data.frame(eda_counts) %>% select(the_geom), by = community)
## execute within shiny app for grade level implementation
eda_counts2 <- eda_counts
gencat_count <- as.data.frame(eda_counts) %>%
filter(min_grade <= 1 | max_grade >= 13) %>%
group_by(community, general_category) %>%
summarize(n = n(),
free_food = sum(program_provides_free_food)) %>%
inner_join(as.data.frame(eda_counts2) %>% select(the_geom), by = community)
View(eda_counts2)
gencat_count <- as.data.frame(eda_counts) %>%
filter(min_grade <= 1 | max_grade >= 13) %>%
group_by(community, general_category) %>%
summarize(n = n(),
free_food = sum(program_provides_free_food)) #%>%
View(gencat_count)
inner_join(as.data.frame(eda_counts2) %>% select(the_geom, community), by = community)
gencat_count <- inner_join(gencat_count, as.data.frame(eda_counts2) %>% select(the_geom, community), by = community)
as.data.frame(eda_counts2) %>% select(the_geom, community)
x<- as.data.frame(eda_counts2) %>% select(the_geom, community)
View(x)
x %>% distinct()
x %>% distinct(community)
x %>% distinct()
x<-x %>% distinct()
gencat_count <- inner_join(gencat_count, as.data.frame(eda_counts2) %>% select(the_geom, community) %>% distinct(), by = community)
as.data.frame(eda_counts2) %>% select(the_geom, community) %>% distinct()
View(gencat_count)
gencat_count <- inner_join(gencat_count, as.data.frame(eda_counts2) %>% select(the_geom, community) %>% distinct(), by = "community")
View(gencat_count)
gencat_count <- gencat_count %>%
group_by(community, general_category) %>%
summarize(n = sum(n),
free_food = sum(free_food))
View(gencat_count)
gencat_count <- inner_join(gencat_count, as.data.frame(eda_counts2) %>% select(the_geom, community) %>% distinct(), by = "community")
gencat_count <- pivot_wider(data = as.data.frame(gencat_count),
names_from = general_category,
values_from = c(n, free_food, the_geom)) %>%
select(-c(
`the_geom_Leisure & Arts`,
`the_geom_Professional Skill Building`,
`the_geom_Community Service`)) %>%
rename("the_geom" = "the_geom_Academics") %>%
mutate(n_Academics = replace_na(n_Academics, 0),
`n_Community Service` = replace_na(`n_Community Service`, 0),
`n_Professional Skill Building` = replace_na(`n_Professional Skill Building`, 0),
`n_Leisure & Arts` = replace_na(`n_Leisure & Arts`, 0),
free_food_Academics = replace_na(free_food_Academics, 0),
`free_food_Community Service` = replace_na(`free_food_Community Service`, 0),
`free_food_Professional Skill Building` = replace_na(`free_food_Professional Skill Building`, 0),
`free_food_Leisure & Arts` = replace_na(`free_food_Leisure & Arts`, 0)) %>%
mutate(n_sum = n_Academics + `n_Community Service` +
`n_Professional Skill Building` + `n_Leisure & Arts`,
free_food_sum = free_food_Academics + `free_food_Community Service` +
`free_food_Professional Skill Building` + `free_food_Leisure & Arts`) %>%
mutate(n_prop_Academics = n_Academics / n_sum,
`n_prop_Community Service` = `n_Community Service` / n_sum,
`n_prop_Leisure & Arts` = `n_Leisure & Arts` / n_sum,
`n_prop_Professional Skill Building` = `n_Professional Skill Building` / n_sum,
free_food_prop_Academics = free_food_Academics / n_Academics,
`free_food_prop_Community Service` = `free_food_Community Service` / `n_Community Service`,
`free_food_prop_Leisure & Arts` = `free_food_Leisure & Arts` / `n_Leisure & Arts`,
`free_food_prop_Professional Skill Building` = `free_food_Professional Skill Building` / `n_Professional Skill Building`) %>%
mutate(free_food_prop_Academics = replace_na(free_food_prop_Academics, 0),
`free_food_prop_Community Service` = replace_na(`free_food_prop_Community Service`, 0),
`free_food_prop_Leisure & Arts` = replace_na(`free_food_prop_Leisure & Arts`, 0),
`free_food_prop_Professional Skill Building` = replace_na(`free_food_prop_Professional Skill Building`, 0))
View(gencat_count)
st_as_sf(gencat_count) %>%
ggplot() +
geom_sf(aes(fill = n_Academics)) +
scale_fill_gradient(name = "Count", low = "white", high = "#FF0000") +
theme_void()
## execute within shiny app for grade level implementation
eda_counts2 <- eda_counts
gencat_count <- as.data.frame(eda_counts) %>%
filter(min_grade <= 1 | max_grade >= 13) %>%
group_by(community, general_category) %>%
summarize(n = n(),
free_food = sum(program_provides_free_food))
gencat_count <- gencat_count %>%
group_by(community, general_category) %>%
summarize(n = sum(n),
free_food = sum(free_food)) %>%
inner_join(as.data.frame(eda_counts2) %>% select(the_geom, community) %>% distinct(), by = "community")
gencat_count <- pivot_wider(data = as.data.frame(gencat_count),
names_from = general_category,
values_from = c(n, free_food, the_geom)) %>%
select(-c(
`the_geom_Leisure & Arts`,
`the_geom_Professional Skill Building`,
`the_geom_Community Service`)) %>%
rename("the_geom" = "the_geom_Academics") %>%
mutate(n_Academics = replace_na(n_Academics, 0),
`n_Community Service` = replace_na(`n_Community Service`, 0),
`n_Professional Skill Building` = replace_na(`n_Professional Skill Building`, 0),
`n_Leisure & Arts` = replace_na(`n_Leisure & Arts`, 0),
free_food_Academics = replace_na(free_food_Academics, 0),
`free_food_Community Service` = replace_na(`free_food_Community Service`, 0),
`free_food_Professional Skill Building` = replace_na(`free_food_Professional Skill Building`, 0),
`free_food_Leisure & Arts` = replace_na(`free_food_Leisure & Arts`, 0)) %>%
mutate(n_sum = n_Academics + `n_Community Service` +
`n_Professional Skill Building` + `n_Leisure & Arts`,
free_food_sum = free_food_Academics + `free_food_Community Service` +
`free_food_Professional Skill Building` + `free_food_Leisure & Arts`) %>%
mutate(n_prop_Academics = n_Academics / n_sum,
`n_prop_Community Service` = `n_Community Service` / n_sum,
`n_prop_Leisure & Arts` = `n_Leisure & Arts` / n_sum,
`n_prop_Professional Skill Building` = `n_Professional Skill Building` / n_sum,
free_food_prop_Academics = free_food_Academics / n_Academics,
`free_food_prop_Community Service` = `free_food_Community Service` / `n_Community Service`,
`free_food_prop_Leisure & Arts` = `free_food_Leisure & Arts` / `n_Leisure & Arts`,
`free_food_prop_Professional Skill Building` = `free_food_Professional Skill Building` / `n_Professional Skill Building`) %>%
mutate(free_food_prop_Academics = replace_na(free_food_prop_Academics, 0),
`free_food_prop_Community Service` = replace_na(`free_food_prop_Community Service`, 0),
`free_food_prop_Leisure & Arts` = replace_na(`free_food_prop_Leisure & Arts`, 0),
`free_food_prop_Professional Skill Building` = replace_na(`free_food_prop_Professional Skill Building`, 0))
View(gencat_count)
load("~/Desktop/Northwestern/Year 4/Quarter 3/STAT 390 - Data Science Project/STAT-390-project/map/fixed_map_counts.rda")
runApp('map')
board<-matrix(c(rep(0,4),3,rep(0,3),1,9,8,rep(0,4),6,rep(0,5),8,0,7,
rep(0,5),6,2,0,4,0,7,0,0,4,rep(0,4),9,6,0,0,7,0,5,0,3,
4,8,rep(0,6),1,rep(0,5),7,rep(0,4),5,9,5,rep(0,3),7,rep(0,4)),
9,9)
plot(c(0,9),c(0,9),type="n",xlab = "",ylab = "",main = "Sudoku puzzle",
xaxt="n",yaxt="n",bty="n",asp = 1)
for(i in 1:9)
{
for(j in 1:9)
{
rect(i-1,j-1,i,j)
if(board[10-j,i]!=0)
{text((i-1)+0.5,(j-1)+0.5,(((board[10-j,i]))))}
}
}
for(i in 1:3)
{
for(j in 1:3)
{
rect((i-1)*3,(j-1)*3,3*i,3*j,lwd=2)
}
}
plot(c(0,9),c(0,9),type="n",xlab = "",ylab = "",main = "Sudoku solved",
xaxt="n",yaxt="n",bty="n",asp = 1)
for(i in 1:9)
{
for(j in 1:9)
{
rect(i-1,j-1,i,j)
if(board[10-j,i]!=0)
{text((i-1)+0.5,(j-1)+0.5,(((board[10-j,i]))))}else{
text((i-1)+0.5,(j-1)+0.5,(((result[10-j,i]))),col = 2,cex=1.25)}
}
}
# Reading in the data
library(rjson)
ted_talks<-fromJSON(file='TED_Talks.json')
# Reading in the data
library(rjson)
ted_talks<-fromJSON(file='TED_Talks.json')
#Naming type of vote to access it by name for each Ted talk
type_of_vote<-function(x)
{
names(x$rates)<-sapply(x$rates, function (x) x$name)
return(x)
}
ted_talks_named<-lapply(ted_talks,type_of_vote)
max_funny_talks_index=as.integer(names(sort(sapply(ted_talks_named,function(x) as.integer(x$rates$Funny$count)),decreasing = TRUE)[1:5]))
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$headline)
View(ted_talks_named)
ted_talks_named
#Adding total votes for each Ted talk
total_votes<-function(x)
{
tot_votes<-sum(sapply(x$rates,function(y) y$count))
x$rates$total_votes<-tot_votes
return(x)
}
ted_talks_total_votes<-lapply(ted_talks_named,total_votes)
# Finding the proportion inspiring votes for each talk
proportion_inspiring_votes<-sapply(ted_talks_total_votes,function(x) x$rates$Inspiring$count/x$rates$total_votes)
# Finding top 5 talks with highest proportion
max_inspiring_prop_index=as.integer(names(sort(proportion_inspiring_votes,decreasing = TRUE))[1:5])
# Getting the headline, year, and proportion for these 5 talks
sapply(max_inspiring_prop_index, function(x) ted_talks_named[[x]]$headline)
sapply(max_inspiring_prop_index, function(x) ted_talks_named[[x]]$year_filmed)
sort(proportion_inspiring_votes,decreasing = TRUE)[1:5]
#Naming type of vote to access it by name for each Ted talk
type_of_vote<-function(x)
{
names(x$rates)<-sapply(x$rates, function (x) x$name)
return(x)
}
ted_talks_named<-lapply(ted_talks,type_of_vote)
# Finding indices of talks with the 5 most funny votes
max_funny_talks_index=as.integer(names(sort(sapply(ted_talks_named,function(x) as.integer(x$rates$Funny$count)),decreasing = TRUE)[1:5]))
# Finding the headline, year, and count for these 5 talks
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$headline)
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$year_filmed)
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$rates$Funny$count)
#Naming type of vote to access it by name for each Ted talk
type_of_vote<-function(x)
{
names(x$rates)<-sapply(x$rates, function (x) x$name)
return(x)
}
ted_talks_named<-lapply(ted_talks,type_of_vote)
# Finding indices of talks with the 5 most funny votes
max_funny_talks_index=as.integer(names(sort(sapply(ted_talks_named,function(x) as.integer(x$rates$Funny$count)),decreasing = TRUE)[1:5]))
# Finding the headline, year, and count for these 5 talks
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$headline)
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$year_filmed)
sapply(max_funny_talks_index, function(x) ted_talks_named[[x]]$rates$Funny$count)
max_funny_talks_index
ted_talks_named
sapply(ted_talks_named,function(x) as.integer(x$rates$Funny$count)
)
(sort(sapply(ted_talks_named,function(x) as.integer(x$rates$Funny$count)
)
#| eval: false
# Reading in the wordlist
wordlist_global<-unlist(read.table('wordlist.txt', header = FALSE, sep = "", dec = "."))
#| eval: false
# Reading in the wordlist
wordlist_global<-unlist(read.table('wordlist.txt', header = FALSE, sep = "", dec = "."))
# Defining function
word_search<-function(word,wordlist)
{
# Getting the length, then half the length
length_wordlist<<-length(wordlist)
half_length<-as.integer(length_wordlist/2)+1
# Getting the middle word
word_half_length<-wordlist[half_length]
# If the middle word is our word, return true
if(word==word_half_length)
{
return(TRUE)
}
# If the length is only 1, we have one  word left, so check if it is our word or not
if(length_wordlist==1)
{
if(word==wordlist[1])
{
return(TRUE)
}
return(FALSE)
# Here, check is our word is less than or greater than (alphabetically) to the middle word
# Call the function again with either the first or second half of our list
}else{
if(word<word_half_length){
word_search(word,wordlist[1:(half_length-1)])
}else{
word_search(word,wordlist[half_length:length(wordlist)])
}
}
}
word_search('agreement',wordlist_global)
# Set iteration variable
iterations<-0
word_search<-function(word,wordlist)
{
# Add one every time we call the function, can do this here since our function is recursive
iterations<<-iterations+1
length_wordlist<<-length(wordlist)
half_length<-as.integer(length_wordlist/2)+1
word_half_length<-wordlist[half_length]
if(word==word_half_length)
{
return(TRUE)
}
if(length_wordlist==1)
{
if(word==wordlist[1])
{
return(TRUE)
}
return(FALSE)
}else{
if(word<word_half_length){
word_search(word,wordlist[1:(half_length-1)])
}else{
word_search(word,wordlist[half_length:length(wordlist)])
}
}
}
word_search('agreement',wordlist_global)
print(paste("Iterations = ",iterations))
iterations<-0
word_search('aghast',wordlist_global)
print(paste("Iterations = ",iterations))
# Initializing a start index and length variable
start_index<-1
length_wordlist<-0
iterations<-0
word_search<-function(word,wordlist)
{
iterations<<-iterations+1
# Setting the length to the length of  our current list
length_wordlist<<-length(wordlist)
half_length<-as.integer(length_wordlist/2)+1
word_half_length<-wordlist[half_length]
if(word==word_half_length)
{
return(TRUE)
}
if(length_wordlist==1)
{
if(word==wordlist[1])
{
return(TRUE)
}
return(FALSE)
}else{
if(word<word_half_length){
word_search(word,wordlist[1:(half_length-1)])
}else{
# Updating our index to what is previously was plus half of the length of our wordlist
start_index<<-start_index+half_length-1
word_search(word,wordlist[half_length:length(wordlist)])
}
}
}
word_search('agreement',wordlist_global)
print(paste("Index = ",start_index+as.integer(length_wordlist/2)))
iterations<-0;start_index<-1
word_search('aghast',wordlist_global)
print(paste("Index = ",start_index+as.integer(length_wordlist/2)))
# Initializing a start index and length variable
start_index<-1
length_wordlist<-0
iterations<-0
word_search<-function(word,wordlist)
{
iterations<<-iterations+1
# Setting the length to the length of  our current list
length_wordlist<<-length(wordlist)
half_length<-as.integer(length_wordlist/2)+1
word_half_length<-wordlist[half_length]
if(word==word_half_length)
{
return(TRUE)
}
if(length_wordlist==1)
{
if(word==wordlist[1])
{
return(TRUE)
}
return(FALSE)
}else{
if(word<word_half_length){
word_search(word,wordlist[1:(half_length-1)])
}else{
# Updating our index to what is previously was plus half of the length of our wordlist
start_index<<-start_index+half_length-1
word_search(word,wordlist[half_length:length(wordlist)])
}
}
}
word_search('agreement',wordlist_global)
print(paste("Index = ",start_index+as.integer(length_wordlist/2)))
iterations<-0;start_index<-1
word_search('skirmish',wordlist_global)
print(paste("Index = ",start_index+as.integer(length_wordlist/2)))
# Initializing a start index and length variable
start_index<-1
length_wordlist<-0
iterations<-0
word_search<-function(word,wordlist)
{
iterations<<-iterations+1
# Setting the length to the length of  our current list
length_wordlist<<-length(wordlist)
half_length<-as.integer(length_wordlist/2)+1
word_half_length<-wordlist[half_length]
if(word==word_half_length)
{
return(TRUE)
}
if(length_wordlist==1)
{
if(word==wordlist[1])
{
return(TRUE)
}
return(FALSE)
}else{
if(word<word_half_length){
word_search(word,wordlist[1:(half_length-1)])
}else{
# Updating our index to what is previously was plus half of the length of our wordlist
start_index<<-start_index+half_length-1
word_search(word,wordlist[half_length:length(wordlist)])
}
}
}
word_search('agreement',wordlist_global)
print(start_index)
print(length_wordlist)
print(paste("Index = ",start_index+as.integer(length_wordlist/2)))
iterations<-0;start_index<-1
word_search('skirmish',wordlist_global)
print(paste("Index = ",start_index+as.integer(length_wordlist/2)))
runApp('map')
runApp('map')
runApp('map')
runApp('map')
runApp('map')
runApp('map')
x <- as.data.frame(eda_counts) %>%
filter(!(min_grade < 2 & max_grade < 2) &
!(min_grade > 6 & max_grade > 6))
View(x)
x <- as.data.frame(eda_counts) %>%
filter(!(min_grade < 2 & max_grade < 2) &
!(min_grade > 2 & max_grade > 2))
runApp('map')
runApp('map')
runApp('map')
## execute within shiny app for grade level implementation
eda_counts2 <- eda_counts
gencat_count <- as.data.frame(eda_counts) %>%
filter(min_grade <= 1 | max_grade >= 13) %>%
group_by(community, general_category) %>%
summarize(n = n(),
free_food = sum(program_provides_free_food))
gencat_count <- gencat_count %>%
group_by(community, general_category) %>%
summarize(n = sum(n),
free_food = sum(free_food)) %>%
inner_join(as.data.frame(eda_counts2) %>% select(the_geom, community) %>% distinct(), by = "community")
gencat_count <- pivot_wider(data = as.data.frame(gencat_count),
names_from = general_category,
values_from = c(n, free_food, the_geom)) %>%
select(-c(
`the_geom_Leisure & Arts`,
`the_geom_Professional Skill Building`,
`the_geom_Community Service`)) %>%
rename("the_geom" = "the_geom_Academics") %>%
mutate(n_Academics = replace_na(n_Academics, 0),
`n_Community Service` = replace_na(`n_Community Service`, 0),
`n_Professional Skill Building` = replace_na(`n_Professional Skill Building`, 0),
`n_Leisure & Arts` = replace_na(`n_Leisure & Arts`, 0),
free_food_Academics = replace_na(free_food_Academics, 0),
`free_food_Community Service` = replace_na(`free_food_Community Service`, 0),
`free_food_Professional Skill Building` = replace_na(`free_food_Professional Skill Building`, 0),
`free_food_Leisure & Arts` = replace_na(`free_food_Leisure & Arts`, 0)) %>%
mutate(n_sum = n_Academics + `n_Community Service` +
`n_Professional Skill Building` + `n_Leisure & Arts`,
free_food_sum = free_food_Academics + `free_food_Community Service` +
`free_food_Professional Skill Building` + `free_food_Leisure & Arts`) %>%
mutate(n_prop_Academics = n_Academics / n_sum,
`n_prop_Community Service` = `n_Community Service` / n_sum,
`n_prop_Leisure & Arts` = `n_Leisure & Arts` / n_sum,
`n_prop_Professional Skill Building` = `n_Professional Skill Building` / n_sum,
free_food_prop_Academics = free_food_Academics / n_Academics,
`free_food_prop_Community Service` = `free_food_Community Service` / `n_Community Service`,
`free_food_prop_Leisure & Arts` = `free_food_Leisure & Arts` / `n_Leisure & Arts`,
`free_food_prop_Professional Skill Building` = `free_food_Professional Skill Building` / `n_Professional Skill Building`) %>%
mutate(free_food_prop_Academics = replace_na(free_food_prop_Academics, 0),
`free_food_prop_Community Service` = replace_na(`free_food_prop_Community Service`, 0),
`free_food_prop_Leisure & Arts` = replace_na(`free_food_prop_Leisure & Arts`, 0),
`free_food_prop_Professional Skill Building` = replace_na(`free_food_prop_Professional Skill Building`, 0)) %>%
mutate(priority = tolower(community) %in% tolower(list_priority_areas))
list_priority_areas = c("Austin", "North Lawndale", "Humboldt Park",
"East Garfield Park", "Englewood", "Auburn Gresham",
"West Garfield Park", "Roseland", "Greater Grand Crossing",
"West Englewood", "South Shore", "New City", "Chicago Lawn",
"South Lawndale", "West Pullman"
)
gencat_count <- pivot_wider(data = as.data.frame(gencat_count),
names_from = general_category,
values_from = c(n, free_food, the_geom)) %>%
select(-c(
`the_geom_Leisure & Arts`,
`the_geom_Professional Skill Building`,
`the_geom_Community Service`)) %>%
rename("the_geom" = "the_geom_Academics") %>%
mutate(n_Academics = replace_na(n_Academics, 0),
`n_Community Service` = replace_na(`n_Community Service`, 0),
`n_Professional Skill Building` = replace_na(`n_Professional Skill Building`, 0),
`n_Leisure & Arts` = replace_na(`n_Leisure & Arts`, 0),
free_food_Academics = replace_na(free_food_Academics, 0),
`free_food_Community Service` = replace_na(`free_food_Community Service`, 0),
`free_food_Professional Skill Building` = replace_na(`free_food_Professional Skill Building`, 0),
`free_food_Leisure & Arts` = replace_na(`free_food_Leisure & Arts`, 0)) %>%
mutate(n_sum = n_Academics + `n_Community Service` +
`n_Professional Skill Building` + `n_Leisure & Arts`,
free_food_sum = free_food_Academics + `free_food_Community Service` +
`free_food_Professional Skill Building` + `free_food_Leisure & Arts`) %>%
mutate(n_prop_Academics = n_Academics / n_sum,
`n_prop_Community Service` = `n_Community Service` / n_sum,
`n_prop_Leisure & Arts` = `n_Leisure & Arts` / n_sum,
`n_prop_Professional Skill Building` = `n_Professional Skill Building` / n_sum,
free_food_prop_Academics = free_food_Academics / n_Academics,
`free_food_prop_Community Service` = `free_food_Community Service` / `n_Community Service`,
`free_food_prop_Leisure & Arts` = `free_food_Leisure & Arts` / `n_Leisure & Arts`,
`free_food_prop_Professional Skill Building` = `free_food_Professional Skill Building` / `n_Professional Skill Building`) %>%
mutate(free_food_prop_Academics = replace_na(free_food_prop_Academics, 0),
`free_food_prop_Community Service` = replace_na(`free_food_prop_Community Service`, 0),
`free_food_prop_Leisure & Arts` = replace_na(`free_food_prop_Leisure & Arts`, 0),
`free_food_prop_Professional Skill Building` = replace_na(`free_food_prop_Professional Skill Building`, 0)) %>%
mutate(priority = tolower(community) %in% tolower(list_priority_areas))
View(gencat_count)
runApp('map')
runApp('map')
