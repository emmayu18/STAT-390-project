df <- bind_rows(df, fornow)
}
for (i in length(mcmf)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address)
df <- bind_rows(df, fornow)
}
for (i in 1:nrow(mcmf)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address)
df <- bind_rows(df, fornow)
}
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
for (i in 1:nrow(mcmf)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address) %>%
mutate(across(everything(), as.character))
df <- bind_rows(df, fornow)
}
nrow(mcmf)
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address) %>%
mutate_all(as.character)
i <- 1
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address)
fornow %>% mutate_all(as.character)
fornow2 <- fornow %>% mutate_all(as.character)
View(fornow2)
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
for (i in 1:nrow(mcmf)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
## libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(tigris)
function (.x, .f, ...)
library(censusxy)
library(censusxy)
## load data
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names() %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
## within illinois coordinate reference system
crs = st_crs(illinois))
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names()
map <- read_csv("data/mcmf_map.csv") %>%
janitor::clean_names()
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
for (i in 1:nrow(mcmf)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
i <- 1
fornow <- cxy_single(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode) %>%
mutate(address = mcmf[i, ]$address) %>%
mutate_all(as.character)
fornow
df2 <- bind_rows(df, fornow)
View(df2)
View(fornow)
View(df)
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
df2 <- bind_rows(df, fornow)
View(df2)
mcmf2 <- mcmf %>%
filter(!is.na(address))
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode) %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode) %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
View(df)
View(mcmf2)
mcmf2 %>% skimr::skim_without_charts()
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state))
View(mcmf2)
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode) %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode) %>%
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
View(df)
View(mcmf2)
View(df)
View(mcmf2)
## libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(tigris)
library(censusxy)
## load data
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names() # %>%
mcmf %>%
filter(meeting_type == "face_to_face") %>%
skimr::skim_without_charts()
map <- read_csv("data/mcmf_map.csv") %>%
janitor::clean_names()
censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139)
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state))
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
View(df)
cxy_single("1200 West Harrison St., Suite #2560", "Chicago", "IL", 60607)
cxy_single("4753 N Broadway 4th floor", "Chicago", "IL", 60640)
?cxy_single
## libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(tigris)
library(censusxy)
## load data
mcmf <- read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv") %>%
janitor::clean_names() # %>%
mcmf %>%
filter(meeting_type == "face_to_face") %>%
skimr::skim_without_charts()
map <- read_csv("data/mcmf_map.csv") %>%
janitor::clean_names()
df <- censusxy::cxy_single("3700 Lindell Blvd", "St. Louis", "MO", 63139) %>%
mutate(address = "HAHA") %>%
colnames() %>%
purrr::map_dfc(setNames, object = list(character()))
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state))
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (fornow = NULL) {
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (fornow == NULL) {
next
}
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(fornow)){
next
}
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude))
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
ditinct()
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
distinct()
for (i in 1:nrow(mcmf2)){
## list = list(mcmf[i, ]$address, mcmf[i, ]$city, mcmf[i, ]$state, mcmf[i, ]$zipcode)
fornow <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(fornow)){
next
}
fornow <- fornow %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, fornow)
}
for (i in 1:nrow(mcmf2)){
cxy_out <- cxy_single(mcmf2[i, ]$address, mcmf2[i, ]$city, mcmf2[i, ]$state, mcmf2[i, ]$zipcode)
if (is.null(cxy_out)){
next
}
cxy_out <- cxy_out %>%
mutate(address = mcmf2[i, ]$address) %>%
mutate_all(as.character)
df <- bind_rows(df, cxy_out)
}
View(df)
df2 <- df %>%
distinct()
df2 <- df %>%
select(address, starts_with("coordinate"))
View(df2)
df2 <- df %>%
select(address, starts_with("coordinate")) %>%
distinct()
View(df2)
df2 <- df %>%
select(address, coordinates.x, coordinates.y) %>%
distinct()
View(df2)
df3 <- df %>%
select(address) %>%
distinct()
View(df3)
View(mcmf2)
mcmf2 <- mcmf %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
select(address, city, zipcode, state) %>%
distinct()
mcmf_impute <- mcmf %>%
filter(is.na(latitude))
mcmf_impute <- mcmf %>%
filter(is.na(latitude)) %>%
left_join(df2, by = "address")
View(mcmf_impute)
mcmf_impute <- mcmf %>%
filter(is.na(latitude)) %>%
left_join(df2)
View(mcmf_impute)
mcmf_impute %>% skimr::skim_without_charts()
mcmf_impute <- mcmf %>%
filter(meeting_type == "face_to_face") %>%
filter(!is.na(address)) %>%
filter(!is.na(city)) %>%
filter(!is.na(zipcode)) %>%
filter(!is.na(state)) %>%
filter(is.na(latitude)) %>%
left_join(df2)
View(mcmf_impute)
mcmf_hasxy <- mcmf %>%
filter(!is.na(latitude))
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute)
View(mcmf_impute)
View(mcmf_map)
mcmf_map2 <- mcmf_map %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y))
mcmf_map2 <- mcmf_map %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y))
View(mcmf_map2)
mcmf_map2 <- mcmf_map %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude))
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute) %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude))
View(mcmf_map)
mcmf_map <- mcmf %>%
filter(!is.na(latitude)) %>%
bind_rows(mcmf_impute) %>%
mutate(latitude = as.character(latitude)) %>%
mutate(longitude = as.character(longitude)) %>%
mutate(latitude = dplyr::coalesce(latitude, coordinates.x)) %>%
mutate(longitude = dplyr::coalesce(longitude, coordinates.y)) %>%
filter(!is.na(latitude)) %>%
filter(!is.na(longitude)) %>%
select(-c(starts_with("coordinates")))
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
illinois <- tidycensus::get_acs(state = "IL", geography = "tract",
variables = "B19013_001", geometry = TRUE)
mcmf_map2 <- mcmf_map %>%
# convert longitude, latitude to one column of points
st_as_sf(coords = c("longitude", "latitude"),
# within illinois coordinate reference system
crs = st_crs(illinois))
library(tidyverse)
library(tidyverse)
update.packages("rlang")
)
update.packages("rlang")
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
library(tidyverse)
library(tidyverse)
library(skimr)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
dat
shiny::runApp('map')
runApp('map')
gencat_count
# load packages that will be used for the application
library(shiny)
library(tidyverse)
library(dplyr)
library(janitor)
library(lubridate)
library(gtExtras)
library(sf)
library(tidycensus)
library(mapview)
library(leaflet)
library(sp)
# load in data ------------------------------------------------------------------
load("map_cleaning.rda")
load("~/Desktop/Northwestern/Year 4/Quarter 3/STAT 390 - Data Science Project/STAT-390-project/map/map_cleaning.rda")
load("~/Desktop/Northwestern/Year 4/Quarter 3/STAT 390 - Data Science Project/STAT-390-project/map/map_counts.rda")
View(gencat_count)
View(dat)
View(eda_counts)
gencat_count %>%
filter(general_category == "Academics")
runApp('map')
gencat_count %>%
filter(general_category %in% c("Academics", "Leisure & Arts",
"Professional Skill Building",
"Community Service"))
runApp('map')
gencat_count %>%
filter(general_category %in% c("Academics", "Leisure & Arts",
"Professional Skill Building",
"Community Service")) %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient(name = "Count", low = "white", high = "#FF0000") +
theme_void()
gencat_count %>%
filter(general_category %in% c("Academics")) %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient(name = "Count", low = "white", high = "#FF0000") +
theme_void()
gencat_count %>%
filter(general_category %in% c("Academics", "Leisure & Arts",
"Professional Skill Building",
"Community Service")) %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient(name = "Count", low = "white", high = "#FF0000") +
theme_void()
gencat_count %>%
filter(general_category %in% c(
"Community Service")) %>%
ggplot() +
geom_sf(aes(fill = n)) +
scale_fill_gradient(name = "Count", low = "white", high = "#FF0000") +
theme_void()
fill_var <- switch(input$gen_category,
"All" = c("Academics", "Leisure & Arts",
"Professional Skill Building",
"Community Service"),
"Academics" = c("Academics"),
"Leisure & Arts" = c("Leisure & Arts"),
"Professional Skill Building" = c("Professional Skill Building"),
"Community Service" = c("Community Service"))
input
runApp('map')
gencat_count %>%
group_by(general_category) %>%
summarize(count = n())
gencat_count %>%
group_by(general_category) %>%
summarize(sum = sum(n))
?pivot_wider
gencat_count %>%
pivot_wider(names_from = general_category,
values_from = n)
gencat_count %>%
pivot_wider(names_from = general_category,
values_from = n)
View(gencat_count)
gencat_count %>%
pivot_wider(id_cols = community,
names_from = general_category,
values_from = n)
pivot_wider(data = gencat_count,
id_cols = community,
names_from = general_category,
values_from = n)
pivot_wider(data = gencat_count,
id_cols = community,
names_from = gencat_count$general_category,
values_from = n)
gencat_count %>%
pivot_wider(names_from = general_category,
values_from = n)
rlang::last_trace()
gencat_count %>%
pivot_wider(names_from = general_category, values_from = n)
View(eda_counts)
library(shiny)
library(tidyverse)
library(dplyr)
library(janitor)
library(lubridate)
library(gtExtras)
library(sf)
library(tidycensus)
library(mapview)
library(leaflet)
library(sp)
load("map_cleaning.rda")
load("~/Desktop/Northwestern/Year 4/Quarter 3/STAT 390 - Data Science Project/STAT-390-project/map/map_cleaning.rda")
eda_counts <- as.data.frame(mcmf_sp) %>%
replace_na(list(mcmf_sp$program_provides_free_food, FALSE))# %>%
View(eda_counts)
library(skimr)
skim_without_charts(eda_counts)
