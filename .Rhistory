janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
seq(1, 10, by=1)
typeof(seq(1, 3, by=1))
c(seq(1, 3, by=1))
typeof(c(seq(1, 3, by=1)))
x = c(seq(1, 3, by=1))
# addressing duplicate data points
dat <- dat %>%
# take out days of the week columns?
## mutations
# number of days between start of registration and end of registration
# figure out a way to look at distribution of ages within the range
# (combine min_age and max_age)
age_dat <- dat %>%
mutate(age_range = seq(min_age, max_age, by=1))
# addressing duplicate data points
dat <- dat %>%
# take out days of the week columns?
## mutations
# number of days between start of registration and end of registration
# figure out a way to look at distribution of ages within the range
# (combine min_age and max_age)
age_dat <- dat %>%
filter(!is.na(min_age) & !is.na(max_age)) %>%
mutate(age_range = seq(min_age, max_age, by=1))
?seq
skim(dat)
# addressing duplicate data points
dat <- dat %>%
# take out days of the week columns?
## mutations
# number of days between start of registration and end of registration
# figure out a way to look at distribution of ages within the range
# (combine min_age and max_age)
age_dat <- dat %>%
filter(!is.na(min_age) & !is.na(max_age)) #%>%
## mutations
# number of days between start of registration and end of registration
# figure out a way to look at distribution of ages within the range
# (combine min_age and max_age)
age_dat <- dat %>%
filter(!is.na(min_age) & !is.na(max_age)) #%>%
age_dat
## mutations
# number of days between start of registration and end of registration
# figure out a way to look at distribution of ages within the range
# (combine min_age and max_age)
age_dat <- dat %>%
mutate(age_range = seq(min_age, max_age, by=1))
View(dat)
?summarize_each
?summarise
sum("hello", "hi")
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarise(category_name = c(category_name))
# addressing duplicate data points
dat %>%
group_by(id) %>%
mutate(category_name = c(category_name))
# addressing duplicate data points
dat %>%
group_by(id) %>%
mutate(category_name = paste(category_name, sep = ", "))
# addressing duplicate data points
dat %>%
group_by(id) %>%
mutate_each(category_name = paste(category_name, sep = ", "))
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarise_each(funs(paste()))
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarise_each(funs(paste(category_name)))
# addressing duplicate data points
dat %>%
group_by(id) %>%
mutate_each(category_name = paste(category_name, sep = ", "))
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarise(category_name = paste0(category_name, collapse = ", "))
# addressing duplicate data points
dat %>%
group_by(id) %>%
mutate(category_name = paste0(category_name, collapse = ", "))
?strsplit
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))[0]
# addressing duplicate data points
dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))[1]
# addressing duplicate data points
x <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
x[1]
x[2]
x[2][1]
x[1][1][1]
x[2][1][1]
x[2][1][1][1]
View(x)
?inner_join
dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id", "id"))
# addressing duplicate data points
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id", "id"))
rlang::last_error()
rlang::last_trace()
dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
x <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
x = c(1,2)
len(c)
length(c)
length(x)
length("hello")
## mutations
# number of categories
dat %>%
mutate(num_categories = length(category_names))
## mutations
# number of categories
dat %>%
mutate(num_categories = length(category_name))
## mutations
# number of categories
x<- dat %>%
mutate(num_categories = length(category_name))
## mutations
# number of categories
x <- dat %>%
mutate(num_categories = length(category_name[]))
## mutations
# number of categories
x <- dat %>%
mutate(num_categories = length(category_name[.]))
## mutations
# number of categories
x <- dat %>%
mutate(num_categories = lengths(category_name))
## mutations
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
x = "1/2/20"
as.Date(x)
as.Date(x, format = "%m/%d/%Y")
as.Date(x, format = "%m/%d/%y")
format = "%m/%d/%y"),
# number of days between start of registration and end of registration
x <- dat %>%
mutate(registration_open = as.Date(registration_open,
format = "%m/%d/%y"),
registration_deadline = as.Date(registration_open,
format = "%m/%d/%y"))
x = "1/2/20"
as.Date(x, format = "%m/%d/%y")
x =as.Date(x, format = "%m/%d/%y")
y = as.Date("1/7/20", format = "%m/%d/%y")
y-x
z = y-x
typeof(z)
int(z)
as.integer((y-z))
18263/60
18263/60/60
18263/5
as.numeric(y-x)
# number of days between start of registration and end of registration
x <- dat %>%
mutate(registration_open = as.Date(registration_open,
format = "%m/%d/%y"),
registration_deadline = as.Date(registration_open,
format = "%m/%d/%y")) %>%
mutate(days_to_register = as.numeric(registration_deadline - registration_open))
x %>%
group_by(days_to_register) %>%
count()
x %>%
group_by(days_to_register) %>%
summarize(count())
x %>%
group_by(days_to_register) %>%
summarize(sum(days_to_register))
x %>%
filter(days_to_register != 0)
# age range
dat <- dat %>%
mutate(age_range = max_age - min_age)
View(dat)
seq(7,15)
typeof(seq(7,15))
split(seq(7,15))
x <- 1:9
split(x, as.integer(gl(length(x), 3, length(x))))
y <- split(x, as.integer(gl(length(x), 3, length(x))))
y[1]
typeof(y[1])
?split
# age range list
age_dat <- dat %>%
mutate(age_range = seq(min_age, max_age))
View(age_dat)
# age range list
age_dat <- dat %>%
mutate(age_range = seqs(min_age, max_age))
# age range list
age_dat <- dat %>%
mutate(age_range = seq0(min_age, max_age))
# age range list
age_dat <- dat %>%
mutate(age_range = seq(min_age[1], max_age[1]))
# age range list
age_dat <- dat %>%
mutate(age_list = seq(min_age[1], max_age[1]))
# age range list
age_dat <- dat %>%
mutate(age_list = c(seq(min_age[1], max_age[1])))
ggplot(dat, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 4))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name))) +
geom_bar() #+
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 3))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 3, angle = 90))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name))) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(size = 3, angle = 90))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name))) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), na.rm = TRUE)) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90))
x = c(12, 3)
12 in c
12 %in% c
12 %in% x
list_priority_areas = c("Austin", "North Lawndale", "Humboldt Park",
"East Garfield Park", "Englewood", "Auburn Gresham",
"West Garfield Park", "Roseland", "Greater Grand Crossing",
"West Englewood", "South Shore", "New City", "Chicago Lawn",
"South Lawndale", "West Pullman"
)
# whether the region is on priority list
dat %>%
mutate(priority = geographic_cluster_name %in% list_priority_areas)
# whether the region is on priority list
x<-dat %>%
mutate(priority = geographic_cluster_name %in% list_priority_areas)
View(x)
dat %>%
filter(priority == TRUE)
x %>%
filter(priority == TRUE)
x = c("Hello")
tolower(x)
# whether the region is on priority list
x<-dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
labs(title = "Distribution of Regions",
xlab = "Region Name") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
labs(title = "Distribution of Regions",
x = "Region Name",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
labs(title = "Distribution of Regions",
x = "Region Name",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90, hjust = 0)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
labs(title = "Distribution of Regions",
x = "Region Name",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90, hjust = 0.95)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
ggplot(dat, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 4))
dat2 <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# number of days between start of registration and end of registration
dat %>%
mutate(registration_open = as.Date(registration_open,
format = "%m/%d/%y"),
registration_deadline = as.Date(registration_open,
format = "%m/%d/%y")) %>%
mutate(days_to_register = as.numeric(registration_deadline - registration_open))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# age range
dat <- dat %>%
mutate(age_range = max_age - min_age)
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 4))
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
## load data
dat = read_tsv("data/convert_MCMF_ALL_TIME_DATA.csv")
## data cleaning and mutations
# clean names, select out unnecessary features, filter out min_age < 25 data
dat <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat %>%
janitor::clean_names() %>%
select(-c("index_row", "logo_url", "online_address", "program_url",
"registration_url","contact_name", "contact_email",
"contact_phone")) %>%
filter(min_age<25)
dat2 <- dat
# addressing duplicate data points
# saved duplicate category names into list of strings
category_dat <- dat %>%
group_by(id) %>%
summarize(category_name = paste0(category_name, collapse = ", ")) %>%
mutate(category_name = strsplit(category_name, ", "))
dat <- dat %>%
select(-category_name) %>%
distinct(id, .keep_all = TRUE) %>%
inner_join(category_dat, by = c("id"))
# number of categories
dat <- dat %>%
mutate(num_categories = lengths(category_name))
# number of days between start of registration and end of registration
dat %>%
mutate(registration_open = as.Date(registration_open,
format = "%m/%d/%y"),
registration_deadline = as.Date(registration_open,
format = "%m/%d/%y")) %>%
mutate(days_to_register = as.numeric(registration_deadline - registration_open))
# whether the region is on priority list
dat <- dat %>%
mutate(priority = tolower(geographic_cluster_name) %in% tolower(list_priority_areas))
# age range
dat <- dat %>%
mutate(age_range = max_age - min_age)
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 4))
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
theme(axis.text.x = element_text(size = 4, angle = 90, hjust = 0.95))
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 0.95))
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
labs(title = "Distribution of Categories",,
x = "Category",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 0.95))
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
labs(title = "Distribution of Categories",
x = "Category",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 0.95))
ggplot(dat, aes(min_age)) +
geom_histogram()
ggplot(dat, aes(max_age)) +
geom_histogram()
## Visualization
# dist. of regions with priority highlighted
ggplot(dat, mapping = aes(fct_infreq(geographic_cluster_name), fill = priority)) +
geom_bar() +
labs(title = "Distribution of Regions",
x = "Region Name",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 5, angle = 90, hjust = 0.95)) +
scale_fill_manual(values=c("#999999", "#56B4E9"))
# dist. of categories
ggplot(dat2, mapping = aes(fct_infreq(category_name))) +
geom_bar() +
labs(title = "Distribution of Categories",
x = "Category",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 0.95))
# age range list
age_dat <- dat %>%
mutate(age_list = c(seq(min_age, max_age)))
# age range list
age_dat <- dat %>%
mutate(age_list = min_age:max_age)))
# age range list
age_dat <- dat %>%
mutate(age_list = min_age:max_age)
str(1:3)
# age range list
age_dat <- dat %>%
mutate(age_list = toString(min_age:max_age))
View(dat)
View(age_dat)
